{"version":3,"file":"main.js","sources":["../src/dataCollector.js","../src/main.js"],"sourcesContent":["// Data Collection Module for HHLC Experiment\n// Implements hybrid approach: Formspree + Download + localStorage backup\n\nexport class DataCollector {\n    constructor() {\n        // Replace with your actual Formspree endpoint\n        this.formspreeEndpoint = 'https://formspree.io/f/YOUR_FORM_ID';\n        this.backupMethods = [];\n    }\n\n    async submitParticipantData(data) {\n        console.log('Starting data submission with hybrid approach...');\n        const results = [];\n        \n        // Method 1: Try Formspree submission\n        try {\n            const formspreeSuccess = await this.submitToFormspree(data);\n            if (formspreeSuccess) {\n                results.push('✅ Online submission successful');\n            } else {\n                results.push('❌ Online submission failed');\n            }\n        } catch (error) {\n            console.error('Formspree submission error:', error);\n            results.push('❌ Online submission error');\n        }\n\n        // Method 2: Always download as JSON backup (same format as your current data folder)\n        try {\n            this.downloadAsJSON(data);\n            results.push('✅ JSON file downloaded');\n        } catch (error) {\n            console.error('Download failed:', error);\n            results.push('❌ Download failed');\n        }\n\n        // Method 3: Store in localStorage as emergency backup\n        try {\n            this.saveToLocalStorage(data);\n            results.push('✅ Browser backup saved');\n        } catch (error) {\n            console.error('LocalStorage failed:', error);\n            results.push('❌ Browser backup failed');\n        }\n\n        return results;\n    }\n\n    async submitToFormspree(data) {\n        // Don't submit if no endpoint configured\n        if (this.formspreeEndpoint.includes('YOUR_FORM_ID')) {\n            console.log('Formspree not configured, skipping online submission');\n            return false;\n        }\n\n        try {\n            const response = await fetch(this.formspreeEndpoint, {\n                method: 'POST',\n                headers: {\n                    'Accept': 'application/json',\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    sessionId: data.sessionId,\n                    participantData: JSON.stringify(data, null, 2), // Full data as JSON string\n                    timestamp: new Date().toISOString(),\n                    studyType: '8_chart_hhlc_experiment'\n                })\n            });\n\n            return response.ok;\n        } catch (error) {\n            console.error('Formspree submission failed:', error);\n            return false;\n        }\n    }\n\n    downloadAsJSON(data) {\n        // Create exact same structure as your current data/participant_*.json files\n        const participantData = {\n            demographic: {\n                age: data.demographic?.age || '',\n                education: data.demographic?.education || '',\n                profession: data.demographic?.profession || '',\n                visualization: data.demographic?.visualization || '',\n                visualizationBackground: data.demographic?.visualizationBackground || '',\n                visualImpairment: data.demographic?.visualImpairment || '',\n                chartFamiliarity: {\n                    barCharts: data.demographic?.chartFamiliarity?.barCharts || '',\n                    lineCharts: data.demographic?.chartFamiliarity?.lineCharts || '',\n                    scatterplots: data.demographic?.chartFamiliarity?.scatterplots || '',\n                    geographicalMaps: data.demographic?.chartFamiliarity?.geographicalMaps || ''\n                }\n            },\n            responses: data.responses || [],\n            sessionId: data.sessionId,\n            selectedCharts: data.selectedCharts || [],\n            chartCategories: data.chartCategories || {},\n            completedAt: new Date().toISOString(),\n            totalTimeMinutes: data.totalTimeMinutes || 0\n        };\n\n        // Create and download the file\n        const blob = new Blob([JSON.stringify(participantData, null, 2)], {\n            type: 'application/json'\n        });\n        \n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = `participant_${data.sessionId}.json`;\n        a.style.display = 'none';\n        \n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n        \n        console.log(`Downloaded: participant_${data.sessionId}.json`);\n    }\n\n    saveToLocalStorage(data) {\n        const storageKey = `hhlc_participant_${data.sessionId}`;\n        localStorage.setItem(storageKey, JSON.stringify(data));\n        localStorage.setItem('hhlc_latest_session', data.sessionId);\n        console.log(`Saved to localStorage: ${storageKey}`);\n    }\n\n    // Method to retrieve data from localStorage if needed\n    getFromLocalStorage(sessionId) {\n        const storageKey = `hhlc_participant_${sessionId}`;\n        const data = localStorage.getItem(storageKey);\n        return data ? JSON.parse(data) : null;\n    }\n\n    // Method to get all stored sessions\n    getAllStoredSessions() {\n        const sessions = [];\n        for (let i = 0; i < localStorage.length; i++) {\n            const key = localStorage.key(i);\n            if (key && key.startsWith('hhlc_participant_')) {\n                const sessionId = key.replace('hhlc_participant_', '');\n                sessions.push(sessionId);\n            }\n        }\n        return sessions;\n    }\n\n    // Method to configure Formspree endpoint\n    setFormspreeEndpoint(endpoint) {\n        this.formspreeEndpoint = endpoint;\n    }\n\n    // Method to show completion message with results\n    showCompletionMessage(results, sessionId) {\n        const successCount = results.filter(r => r.startsWith('✅')).length;\n        const totalMethods = results.length;\n        \n        const message = `\n            <div style=\"text-align: center; padding: 50px; font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n                <h2 style=\"color: #28a745;\">✅ Thank You for Participating!</h2>\n                <p style=\"font-size: 18px; margin: 20px 0;\">Your data has been saved successfully!</p>\n                \n                <div style=\"background: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;\">\n                    <h3 style=\"margin-top: 0;\">Data Submission Status:</h3>\n                    <ul style=\"text-align: left; display: inline-block;\">\n                        ${results.map(result => `<li style=\"margin: 5px 0;\">${result}</li>`).join('')}\n                    </ul>\n                </div>\n                \n                <div style=\"background: #e7f3ff; padding: 15px; border-radius: 8px; margin: 20px 0;\">\n                    <p><strong>Study ID:</strong> <code>${sessionId}</code></p>\n                    <p style=\"font-size: 14px; color: #666;\">\n                        Please save this ID for your records. If you downloaded a file, \n                        please keep it safe as a backup of your participation.\n                    </p>\n                </div>\n                \n                <p style=\"color: #666; font-size: 14px;\">\n                    Questions about this study? Contact: researcher@email.com\n                </p>\n            </div>\n        `;\n        \n        document.body.innerHTML = message;\n    }\n}\n\n// Create and export a singleton instance\nexport const dataCollector = new DataCollector();\n\n// For debugging - expose to window in development\nif (import.meta.env.DEV) {\n    window.dataCollector = dataCollector;\n}","// Main entry point for HHLC Experiment with Vite\nimport { dataCollector } from './dataCollector.js';\nimport './styles.css';\n\n// Constants\nconst TOTAL_CHARTS = 8; // 1 chart per category (8 categories -> 8 charts total)\nconst TOTAL_AVAILABLE_CHARTS = 40; // Total charts available in images folder (1..40)\nconst TOTAL_STEPS = TOTAL_CHARTS * 3; // 3 questions per chart\nconst container = document.body;\nlet currentStep = 0;\nconst steps = [];\n\n// Timer variables\nlet studyStartTime = null;\nlet timerInterval = null;\nlet totalStudyDurationMs = 0;\n\n// Chart categories for stratified sampling\nconst CHART_CATEGORIES = [\n  { name: \"Single-class Scatterplots\", range: [1, 5] },\n  { name: \"Multi-class Scatterplots\", range: [6, 10] },\n  { name: \"Single-class Line Charts\", range: [11, 15] },\n  { name: \"Multi-class Line Charts\", range: [16, 20] },\n  { name: \"Single-class Bar Graphs\", range: [21, 25] },\n  { name: \"Multi-class Bar Graphs\", range: [26, 30] },\n  { name: \"Single-class Maps\", range: [31, 35] },\n  { name: \"Multi-class Maps\", range: [36, 40] }\n];\n\n// Load demographic + response structure\nconst participantData = JSON.parse(localStorage.getItem(\"participantData\")) || {\n  participantId: 'unknown',\n  demographic: {},\n  responses: []\n};\n\nlet sessionManager;\n\n// Generate stratified selection: one chart from each category\nfunction getStratifiedCharts() {\n  const selected = [];\n\n  // For each category, pick 1 unique random chart from the category range\n  CHART_CATEGORIES.forEach(category => {\n    const [start, end] = category.range;\n    const availableInCategory = [];\n\n    for (let i = start; i <= end; i++) {\n      availableInCategory.push(i);\n    }\n\n    // Shuffle availableInCategory and take first 1 to ensure equal chance for each\n    for (let k = availableInCategory.length - 1; k > 0; k--) {\n      const r = Math.floor(Math.random() * (k + 1));\n      [availableInCategory[k], availableInCategory[r]] = [availableInCategory[r], availableInCategory[k]];\n    }\n\n    // Take up to one item (handles categories with only 1 item gracefully)\n    selected.push(...availableInCategory.slice(0, 1));\n  });\n\n  // Shuffle the final selection to randomize order across categories\n  for (let i = selected.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [selected[i], selected[j]] = [selected[j], selected[i]];\n  }\n\n  // If for any reason we don't have exactly TOTAL_CHARTS, trim or pad (pad by random picks)\n  if (selected.length > TOTAL_CHARTS) {\n    return selected.slice(0, TOTAL_CHARTS);\n  } else if (selected.length < TOTAL_CHARTS) {\n    const allAvailable = [];\n    for (let i = 1; i <= TOTAL_AVAILABLE_CHARTS; i++) allAvailable.push(i);\n    // remove already selected\n    const remaining = allAvailable.filter(x => !selected.includes(x));\n    while (selected.length < TOTAL_CHARTS && remaining.length) {\n      const idx = Math.floor(Math.random() * remaining.length);\n      selected.push(remaining.splice(idx, 1)[0]);\n    }\n  }\n\n  return selected;\n}\n\nconst selectedCharts = getStratifiedCharts();\n\n// Function to get chart category\nfunction getChartCategory(chartId) {\n  for (const category of CHART_CATEGORIES) {\n    const [start, end] = category.range;\n    if (chartId >= start && chartId <= end) {\n      return category.name;\n    }\n  }\n  return \"Unknown\";\n}\n\n// Enhanced data submission function using hybrid approach\nasync function submitDataHybrid() {\n  console.log('Submitting data using hybrid approach...');\n  \n  // Get all collected data\n  const allData = JSON.parse(localStorage.getItem(\"participantData\")) || {};\n  \n  // Prepare the complete dataset in the same format as your current data structure\n  const completeData = {\n    demographic: allData.demographic || {},\n    responses: allData.responses || [],\n    sessionId: allData.sessionId || `session_${Date.now()}`,\n    selectedCharts: selectedCharts,\n    chartCategories: {},\n    completedAt: new Date().toISOString(),\n    totalTimeMinutes: Math.round(totalStudyDurationMs / 60000) || 0\n  };\n\n  // Build chart categories mapping\n  selectedCharts.forEach((chartId, index) => {\n    completeData.chartCategories[chartId.toString()] = getChartCategory(chartId);\n  });\n\n  try {\n    // Use the hybrid data collection system\n    const results = await dataCollector.submitParticipantData(completeData);\n    \n    // Show completion message with results\n    dataCollector.showCompletionMessage(results, completeData.sessionId);\n    \n    console.log('Data submission completed:', results);\n  } catch (error) {\n    console.error('Data submission failed:', error);\n    \n    // Fallback: just download the data\n    dataCollector.downloadAsJSON(completeData);\n    dataCollector.showCompletionMessage(['✅ Downloaded backup file'], completeData.sessionId);\n  }\n}\n\n// Make functions available globally for HTML onclick handlers\nwindow.submitDataHybrid = submitDataHybrid;\nwindow.getStratifiedCharts = getStratifiedCharts;\nwindow.getChartCategory = getChartCategory;\nwindow.TOTAL_CHARTS = TOTAL_CHARTS;\nwindow.TOTAL_STEPS = TOTAL_STEPS;\nwindow.selectedCharts = selectedCharts;\n\n// Initialize when DOM is loaded\ndocument.addEventListener('DOMContentLoaded', () => {\n  console.log('HHLC Experiment initialized with Vite');\n  console.log('Selected charts for this session:', selectedCharts);\n  console.log('Chart categories:', selectedCharts.map(id => ({ id, category: getChartCategory(id) })));\n  \n  // Initialize session if needed\n  if (!localStorage.getItem(\"participantData\")) {\n    const sessionId = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    localStorage.setItem(\"participantData\", JSON.stringify({\n      sessionId: sessionId,\n      demographic: {},\n      responses: []\n    }));\n  }\n});\n\n// Export for potential future use\nexport {\n  TOTAL_CHARTS,\n  TOTAL_STEPS,\n  getStratifiedCharts,\n  getChartCategory,\n  submitDataHybrid,\n  selectedCharts,\n  dataCollector\n};"],"names":["DataCollector","data","results","error","participantData","_a","_b","_c","_d","_e","_f","_h","_g","_j","_i","_l","_k","_n","_m","blob","url","a","storageKey","sessionId","sessions","i","key","endpoint","r","message","result","dataCollector","TOTAL_CHARTS","TOTAL_AVAILABLE_CHARTS","TOTAL_STEPS","totalStudyDurationMs","CHART_CATEGORIES","getStratifiedCharts","selected","category","start","end","availableInCategory","k","j","allAvailable","remaining","x","idx","selectedCharts","getChartCategory","chartId","submitDataHybrid","allData","completeData","index","id"],"mappings":"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"}